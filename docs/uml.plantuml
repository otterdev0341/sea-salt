@startuml "sea-salt-uml"
title Sea Salt - UML Diagram


package "dto" {
    package "user_dto" {

        class ReqCreateUserDto{
            - email : String 'validation: email format
            - password : String 'validation: regx 1 upper, 1 lower, 1 number, 1 special char, min 8 chars 
            - username : String  'not null, unique in db
            - firstName: String 'not null
            - lastName: String 'not null
            - gender: String 'in male, female, other
            - dob: String 'date format yyyy-MM-dd
        }

        class ResEntryUserDto{
            - id : uuid 'generated by db
            - email: String
            - username: String
            - firstName: String
            - lastName: String
            - gender: String
            - dob: String
            - createdAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updatedAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }

        class ReqLoginDto{
            - email: String 'valid format
            - password: String 'not null
        }

        class ResLoginDto{
            - username: String
            - token: String
        }

        class ReqChangePasswordDto{
            - oldPassword: String 'not null
            - newPassword: String 'validation: regx 1 upper, 1 lower, 1 number, 1 special char, min 8 chars
        }

        class ReqChangeUserNameDto{
            - newUsername: String 'not null, unique in db
        }

        class ReqChangeUserInfoDto{
            - firstName: String 'not null
            - lastName: String 'not null
            - dob: String 'date format yyyy-MM-dd
            - gender: String 'in male, female, other
        }
    }

    package "property_type_dto" {
        class ReqCreatePropertyTypeDto{
            - detail: String 'not null
        }

        class ReqUpdatePropertyTypeDto{
            - detail: String 'not null
        }

        class ResEntryPropertyTypeDto{
            - id: uuid 'generated by db
            - detail: String 'not null
            - createdAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updatedAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }

        class ResListEntryPropertyTypeDto{
            - total: int
            - description: String
            - data: List<ResEntryPropertyTypeDto>
        }
    }

    package "property_dto" {
        class ReqCreatePropertyDto{
            - name: String 'not null
            - description: String 'not null
            - specific: String
            - hilight: String
            - area: double 'not null
            - price: double 'not null
            - fsp: double 'forcasted selling price
            - status: String 'in draft, active, sold, archived
            - ownerBy: String
            - mapUrl: String
            - lat: String
            - long: String
            
        }

        class ReqUpdatePropertyDto{
            - name: String 
            - description: String 
            - specific: String
            - hilight: String
            - area: double 
            - price: double 
            - fsp: double 
            - status: String 
            - ownerBy: String
            - mapUrl: String
            - lat: String
            - long: String
            
        }

        class ResEntryPropertyDto{
            - id: uuid 'generated by db
            - name: String 'not null
            - description: String 'not null
            - specific: String
            - hilight: String
            - area: double 'not null
            - price: double 'not null
            - fsp: double 'forcasted selling price
            - status: String 'in draft, active, sold, archived
            - ownerBy: String
            - mapUrl: String
            - lat: String
            - long: String
            - createdAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updatedAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }

        class ResListEntryPropertyDto{
            - total: int
            - description: String
            - data: List<ResEntryPropertyDto>
        }

        class PropertyTypeToPropertyDto {
            - propertyId: uuid 'not null
            - propertyTypeId: uuid 'not null
            
        }
    }

    package "property_status_dto" {
        class ReqCreatePropertyStatusDto {
            - detail: String 'not null
        }

        class ReqUpdatePropertyStatusDto {
            - detail: String 'not null
        }

        class ResEntryPropertyStatusDto {
            - id: uuid 'generated by db
            - detail: String 'not null
            - createdAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updatedAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }

        class ResListEntryPropertyStatusDto {
            - total: int
            - description: String
            - data: List<ResEntryPropertyStatusDto>
        }
    }

    package "response_dto" {
        abstract class OtterResponseDto {
            - status: String
            + getStatus(): String
         }

        ' Success response subclass with generic T
        class SuccessResponseDto<T> {
            - data: T
            + getData(): T
        }

        ' Error response subclass
        class ErrorResponseDto {
            - operation: String
            - message: String
            + getOperation(): String
            + getMessage(): String
        }
    }


    package "contact_dto" {
        class ReqCreateContactDto {
            - businessName: String 'not null
            - internalName: String 'not null
            - detail: String
            - note: String
            - contactType: String
            - address: String
            - phone: String
            - mobilePhone: String
            - line: String
            - email: String
        }

        class ReqUpdateContactDto {
            - businessName: String 'not null
            - internalName: String 'not null
            - detail: String
            - note: String
            - contactType: String
            - address: String
            - phone: String
            - mobilePhone: String
            - line: String
            - email: String
        }

        class ResEntryContactDto {
            - id: uuid 'generated by db
            - businessName: String 'not null
            - internalName: String 'not null
            - detail: String
            - note: String
            - contactType: String
            - address: String
            - phone: String
            - mobilePhone: String
            - line: String
            - email: String
            - created_by: String
            - created_at: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updated_at: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }

        class ResListEntryContactDto {
            - total: int
            - description: String
            - data: List<ResEntryContactDto>
        }
    }

    package "contact_type_dto" {
        class ReqCreateContactTypeDto{
            - description: String 'not null
        }

        class ReqUpdateContactTypeDto{
            - description: String 'not null
        }

        class ResEntryContactTypeDto {
            - id: uuid 'generated by db
            - description: String 'not null
            - createdBy: String 'not null
            - createdAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updatedAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }

        class ResListEntryContactTypeDto{
            - total: int
            - description: String
            - data: List<ResEntryContactTypeDto>
        }
    }

    package "expense_type_dto" {
        class ReqCreateExpenseTypeDto{
            - detail: String 'not null
        }
        class ReqUpdateExpenseTypeDto{
            - detail: String 'not null
        }
        class ResEntryExpenseTypeDto {
            - id: uuid 'generated by db
            - detail: String 'not null
            - createdBy: String 'not null
            - createdAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updatedAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }
        class ResListEntryExpenseTypeDto {
            - total: int
            - description: String
            - data: List<ResEntryExpenseTypeDto>
        }
    }

    package "expense_dto" {
        class ReqCreateExpenseDto{
            - description: String 'not null
            - expense_type_id: uuid 'not null 
        }
        class ReqUpdateExpenseDto{
            - description: String 'not null
            - expense_type_id: uuid 'not null 
        }
        class ResEntryExpenseDto{
            - id: uuid 'generated by db
            - description: String 'not null
            - expense_type_id: String
            - createdBy: String 'not null
            - createdAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.SSSZ
            - updatedAt: String 'date format yyyy-MM-dd'T'HH:mm:ss.S
        }
        class ResListEntryExpenseDto {
            - total: int
            - description: String
            - data: List<ResEntryExpenseDto>
        }
    }
}

package "controller" {
    package "user ops" {
        class UserOperations{
            - userService: UserService
            + register(user: ReqCreateUserDto): Result<ResEntryUserDto, ErrorResponseDto>
            + login(user: ReqLoginDto): Result<ResLoginDto, ErrorResponseDto>
            + changePassword(user: ReqChangePasswordDto): Result<void(), ErrorResponseDto>
            + changeUsername(user: ReqChangeUserNameDto): Result<ResEntryUserDto, ErrorResponseDto>
            + changeUserInfo(user: ReqChangeUserInfoDto): Result<ResEntryUserDto, ErrorResponseDto>
        }
    }

    package "property ops" {
        class PropertyTypeOperations {
            - propertyTypeService: PropertyTypeService
            + createPropertyType(dto: ReqCreatePropertyTypeDto): Result<ResEntryPropertyTypeDto, ErrorResponseDto>
            + updatePropertyType(property_type_id: uuid, dto: ReqUpdatePropertyTypeDto): Result<ResEntryPropertyTypeDto, ErrorResponseDto>
            + getPropertyTypes(user_id: uuid): Result<ResListEntryPropertyTypeDto, ErrorResponseDto>
            + getPropertyTypeById(property_type_id: uuid, user_id: uuid): Result<ResEntryPropertyTypeDto, ErrorResponseDto>
            + deletePropertyType(property_type_id: uuid, user_id_uuid): Result<void(), ErrorResponseDto>
        }
        
        class PropertyStatusOperations {
            - propertyStatusService: PropertyStatusService
            + createPropertyStatus(dto: ReqCreatePropertyStatusDto): Result<ResEntryPropertyStatusDto, ErrorResponseDto>
            + updatePropertyStatus(property_status_id: uuid, dto: ReqUpdatePropertyStatusDto): Result<ResEntryPropertyStatusDto, ErrorResponseDto>
            + getPropertyStatuses(user_id: uuid): Result<ResListEntryPropertyStatusDto, ErrorResponseDto>
            + getPropertyStatusById(property_status_id: uuid, user_id: uuid): Result<ResEntryPropertyStatusDto, ErrorResponseDto>
            + deletePropertyStatus(property_status_id: uuid, user_id_uuid): Result<void(), ErrorResponseDto>
        }

        class PropertyOperations {
            - propertyService: PropertyService
            - propertyAndPropertyTypeService: PropertyAndPropertyTypeService
            + createProperty(dto: ReqCreatePropertyDto): Result<ResEntryPropertyDto, ErrorResponseDto>
            + updateProperty(property_id: uuid, dto: ReqUpdatePropertyDto): Result<ResEntryPropertyDto, ErrorResponseDto>
            + getProperties(user_id: uuid): Result<ResListEntryPropertyDto, ErrorResponseDto>
            + getPropertyById(property_id: uuid, user_id: uuid): Result<ResEntryPropertyDto, ErrorResponseDto>
            + deleteProperty(property_id: uuid, user_id_uuid): Result<void(), ErrorResponseDto>
            /' many to many relationship with property type '/
            + invokePropertyTypeToProperty(user_id: uuid, properPropertyTypeDto: PropertyTypeToPropertyDto): Result<boolean, ErrorResponseDto>
            + revokePropertyTypeToProperty(user_id: uuid, properPropertyTypeDto: PropertyTypeToPropertyDto): Result<boolean, ErrorResponseDto>
        }


    }

    package "contact_ops" {
        class ContactTypeOperations {
            - contactTypeService: ContactTypeService
            + createContactType(dto: ReqCreateContactTypeDto): Result<ResEntryContactTypeDto, ErrorResponseDto>
            + updateContactType(contact_type_id: uuid, dto: ReqUpdateContactTypeDto): Result<ResEntryContactTypeDto, ErrorResponseDto>
            + getContactTypes(user_id: uuid): Result<ResListEntryContactTypeDto, ErrorResponseDto>
            + getContactTypeById(contact_type_id: uuid, user_id: uuid): Result<ResEntryContactTypeDto, ErrorResponseDto>
            + deleteContactType(contact_type_id: uuid, user_id_uuid): Result<void(), ErrorResponseDto>
        }

        class ContactOperations {
            - contactService: ContactService
            - contactTypeService: ContactTypeService
            + createContact(dto: ReqCreateContactDto): Result<ResEntryContactDto, ErrorResponseDto>
            + updateContact(contact_id: uuid, dto: ReqUpdateContactDto): Result<ResEntryContactDto, ErrorResponseDto>
            + getContacts(user_id: uuid): Result<ResListEntryContactDto, ErrorResponseDto>
            + getContactById(contact_id: uuid, user_id: uuid): Result<ResEntryContactDto, ErrorResponseDto>
            + deleteContact(contact_id: uuid, user_id_uuid): Result<void(), ErrorResponseDto>
        }
    }

    package "expense_ops" {
        class ExpenseTypeOperations {
            - expenseTypeService: ExpenseTypeService
            + createExpenseType(dto: ReqCreateExpenseTypeDto): Result<ResEntryExpenseTypeDto, ErrorResponseDto>
            + updateExpenseType(expense_type_id: uuid, dto: ReqUpdateExpenseTypeDto): Result<ResEntryExpenseTypeDto, ErrorResponseDto>
            + getExpenseTypes(user_id: uuid): Result<ResListEntryExpenseTypeDto, ErrorResponseDto>
            + getExpenseTypeById(expense_type_id: uuid, user_id: uuid): Result<ResEntryExpenseTypeDto, ErrorResponseDto>
            + deleteExpenseType(expense_type_id: uuid, user_id_uuid): Result<void(), ErrorResponseDto>
        }

        class ExpenseOperations {
            - expenseService: ExpenseService
            + createExpense(dto: ReqCreateExpenseDto): Result<ResEntryExpenseDto, ErrorResponseDto>
            + updateExpense(expense_id: uuid, dto: ReqUpdateExpenseDto): Result<ResEntryExpenseDto, ErrorResponseDto>
            + getExpenses(user_id: uuid): Result<ResListEntryExpenseDto, ErrorResponseDto>
            + getExpenseById(expense_id: uuid, user_id: uuid): Result<ResEntryExpenseDto, ErrorResponseDto>
            + deleteExpense(expense_id: uuid, user_id_uuid): Result<void(), ErrorResponseDto>
        }
    }
    
}

package "service" {
    class UserService {
        - userRepository: UserRepository
        + register(user: ReqCreateUserDto): Result<ResEntryUserDto, ErrorResponseDto>
        + login(user: ReqLoginDto): Result<ResLoginDto, ErrorResponseDto>
        + changePassword(user: ReqChangePasswordDto): Result<void(), ErrorResponseDto>
        + changeUsername(user: ReqChangeUserNameDto): Result<ResEntryUserDto, ErrorResponseDto>
        + changeUserInfo(user: ReqChangeUserInfoDto): Result<ResEntryUserDto, ErrorResponseDto>
    }

    class PropertyTypeService {
        - propertyTypeRepository : PropertyTypeRepository
        + createPropertyType(user_id: uuid,dto: ReqCreatePropertyTypeDto): Result<ResEntryPropertyTypeDto, ErrorResponseDto>
        + updatePropertyType(id: uuid, dto: ReqUpdatePropertyTypeDto): Result<ResEntryPropertyTypeDto, ErrorResponseDto>
        + getPropertyTypes(): Result<ResListEntryPropertyTypeDto, ErrorResponseDto>
        + getPropertyTypeById(id: uuid): Result<ResEntryPropertyTypeDto, ErrorResponseDto>
        + deletePropertyType(id: uuid): Result<void(), ErrorResponseDto>
    }

    class PropertyStatusService {
        - propertyStatusRepository: PropertyStatusRepository   
        + createPropertyStatus(user_id: uuid, dto: ReqCreatePropertyStatusDto): Result<ResEntryPropertyStatusDto, ErrorResponseDto>
        + updatePropertyStatus(id: uuid, dto: ReqUpdatePropertyStatusDto): Result<ResEntryPropertyStatusDto, ErrorResponseDto>
        + getPropertyStatuses(): Result<ResListEntryPropertyStatusDto, ErrorResponseDto>
        + getPropertyStatusById(id: uuid): Result<ResEntryPropertyStatusDto, ErrorResponseDto>
        + deletePropertyStatus(id: uuid): Result<void(), ErrorResponseDto>
    }

    class PropertyService {
        - propertyRepository: PropertyRepository
        + createProperty(user_id: uuid, dto: ReqCreatePropertyDto): Result<ResEntryPropertyDto, ErrorResponseDto>
        + updateProperty(id: uuid, dto: ReqUpdatePropertyDto): Result<ResEntryPropertyDto, ErrorResponseDto>
        + getProperties(user_id: uuid): Result<ResListEntryPropertyDto, ErrorResponseDto>
        + getPropertyById(id: uuid): Result<ResEntryPropertyDto, ErrorResponseDto>
        + deleteProperty(id: uuid): Result<void(), ErrorResponseDto>
    }

    class PropertyAndPropertyTypeService {
        - propertyAndPropertyTypeRepository: PropertyAndPropertyTypeRepository
        - propertyRepository: PropertyRepository
        - propertyTypeRepository: PropertyTypeRepository
        + invokePropertyTypeToProperty(property_id: uuid, property_type_id: uuid): Result<boolean, ErrorResponseDto>
        + revokePropertyTypeToProperty(property_id: uuid, property_type_id: uuid): Result<boolean, ErrorResponseDto>
    }
   


    class ContactTypeService {
        - contactTypeRepository: ContactTypeRepository
        + createContactType(user_id: uuid, dto: ReqCreateContactTypeDto): Result<ResEntryContactTypeDto, ErrorResponseDto>
        + updateContactType(id: uuid, dto: ReqUpdateContactTypeDto): Result<ResEntryContactTypeDto, ErrorResponseDto>
        + getContactTypes(user_id: uuid): Result<ResListEntryContactTypeDto, ErrorResponseDto>
        + getContactTypeById(id: uuid): Result<ResEntryContactTypeDto, ErrorResponseDto>
        + deleteContactType(id: uuid): Result<void, ErrorResponseDto>
    }

    class ContactService {
        - contactRepository: ContactRepository
        - contactTypeRepository: ContactTypeRepository
        + createContact(user_id: uuid, dto: ReqCreateContactDto): Result<ResEntryContactDto, ErrorResponseDto>
        + updateContact(id: uuid, dto: ReqUpdateContactDto): Result<ResEntryContactDto, ErrorResponseDto>
        + getContacts(user_id: uuid): Result<ResListEntryContactDto, ErrorResponseDto>
        + getContactById(id: uuid): Result<ResEntryContactDto, ErrorResponseDto>
        + deleteContact(id: uuid): Result<void(), ErrorResponseDto>
    }

    class ExpenseTypeService {
        - expenseTypeRepository: ExpenseTypeRepository
        + createExpenseType(user_id: uuid, dto: ReqCreateExpenseTypeDto): Result<ResEntryExpenseTypeDto, ErrorResponseDto>
        + updateExpenseType(id: uuid, dto: ReqUpdateExpenseTypeDto): Result<ResEntryExpenseTypeDto, ErrorResponseDto>
        + getExpenseTypes(user_id: uuid): Result<ResListEntryExpenseTypeDto, ErrorResponseDto>
        + getExpenseTypeById(id: uuid): Result<ResEntryExpenseTypeDto, ErrorResponseDto>
        + deleteExpenseType(id: uuid): Result<void(), ErrorResponseDto>
    }

    class ExpenseService {
        - expenseRepository: ExpenseRepository
        + createExpense(user_id: uuid, dto: ReqCreateExpenseDto): Result<ResEntryExpenseDto, ErrorResponseDto>
        + updateExpense(id: uuid, dto: ReqUpdateExpenseDto): Result<ResEntryExpenseDto, ErrorResponseDto>
        + getExpenses(user_id: uuid): Result<ResListEntryExpenseDto, ErrorResponseDto>
        + getExpenseById(id: uuid): Result<ResEntryExpenseDto, ErrorResponseDto>
        + deleteExpense(id: uuid): Result<void(), ErrorResponseDto>
    }
}

package "req_impl_reporitory" {
    interface ReactiveCrudRepository<T, ID> {
    + Mono<T> findById(id: ID)
    + Mono<T> findById(id: Publisher<ID>)
    + Flux<T> findAll()
    + Flux<T> findAllById(ids: Iterable<ID>)
    + Flux<T> findAllById(ids: Publisher<ID>)
    + <S extends T> Mono<S> save(entity: S)
    + <S extends T> Flux<S> saveAll(entities: Iterable<S>)
    + <S extends T> Flux<S> saveAll(entities: Publisher<S>)
    + Mono<Void> deleteById(id: ID)
    + Mono<Void> deleteById(id: Publisher<ID>)
    + Mono<Void> delete(entity: T)
    + Mono<Void> deleteAll()
    + Mono<Void> deleteAll(entities: Iterable<? extends T>)
    + Mono<Void> deleteAll(entities: Publisher<? extends T>)
    + Mono<Void> deleteAllById(ids: Iterable<? extends ID>)
    + Mono<Boolean> existsById(id: ID)
    + Mono<Boolean> existsById(id: Publisher<ID>)
    + Mono<Long> count()

    
    }
    
}

package "repository" {
    class UserRepository {
        + Mono<Boolean> existsByEmail(email: String) 'implemnt by self
    }

    class PropertyTypeRepository{
        + Mono<Boolean> existsByDetailAndUserId(user_id: uuid, detail: String) 'implemnt by self  
    }

    class PropertyStatusRepository {
        + Mono<Boolean> existsByDetailAndUserId(user_id: uuid, detail: String) 'implemnt by self
        + Mono<ResEntryPropertyStatusDto> findByDetailAndUserId(detail: String, user_id: uuid) 'implemnt by self
    }

    class PropertyRepository {
        + Mono<Boolean> existsByNameAndUserId(user_id: uuid, name: String) 'implemnt by self
        + Mono<ResEntryPropertyDto> findByNameAndUserId(name: String, user_id: uuid) 'implemnt by self
    }

    class PropertyAndPropertyTypeRepository{
        + Mono<Result<boolean>> invokePropertyTypeToProperty(property_id: uuid, property_type_id: uuid)
        + Mono<Result<boolean>> revokePropertyTypeToProperty(property_id: uuid, property_type_id: uuid)
    }
    
    class ContactTypeRepository {
        + Mono<Boolean> existsByDescriptionAndUserId(user_id: uuid, description: String) 'implemnt by self
    }

    class ContactRepository {
        + Mono<Boolean> existsByBusinessNameAndUserId(user_id: uuid, businessName: String) 'implemnt by self
        + Mono<ResEntryContactDto> findByBusinessNameAndUserId(businessName: String, user_id: uuid) 'implemnt by self
    }

    class ExpenseTypeRepository {
        + Mono<Boolean> existsByDetailAndUserId(user_id: uuid, detail: String) 'implemnt by self
    }
}

' Relationships

/'
    expense
'/
ExpenseOperations --> ExpenseService
ExpenseOperations --> ReqCreateExpenseDto
ExpenseOperations --> ReqUpdateExpenseDto
ExpenseOperations --> ResEntryExpenseDto
ExpenseOperations --> ResListEntryExpenseDto
' expense service
ExpenseService --> ExpenseRepository
' expense repository
ExpenseRepository ..|> ReactiveCrudRepository


/'
    expense type
'/
ExpenseTypeRepository ..|> ReactiveCrudRepository
ExpenseTypeService --> ExpenseTypeRepository
ExpenseTypeOperations --> ExpenseTypeService
ExpenseTypeOperations --> ReqCreateExpenseTypeDto
ExpenseTypeOperations --> ReqUpdateExpenseTypeDto
ExpenseTypeOperations --> ResEntryExpenseTypeDto
ExpenseTypeOperations --> ResListEntryExpenseTypeDto
/'
    contact
'/
ContactOperations --> ContactService
ContactOperations --> ReqCreateContactDto
ContactOperations --> ReqUpdateContactDto
ContactOperations --> ResEntryContactDto
ContactOperations --> ResListEntryContactDto
' contact service
ContactService --> ContactRepository
ContactService --> ContactTypeRepository
' contact repository
ContactRepository ..|> ReactiveCrudRepository


/'
    contact type
'/
ContactTypeRepository ..|> ReactiveCrudRepository
ContactTypeService --> ContactTypeRepository
ContactTypeOperations --> ContactTypeService
' user ops & dto
UserOperations --> UserService
UserOperations --> ReqCreateUserDto
UserOperations --> ReqChangePasswordDto
UserOperations --> ReqChangeUserNameDto
UserOperations --> ReqChangeUserInfoDto
UserOperations --> ReqLoginDto
UserOperations --> ResEntryUserDto
UserOperations --> ResLoginDto
' user service
UserService --> UserRepository
' user repository
UserRepository ..|> ReactiveCrudRepository

' property type ops & dto
PropertyTypeOperations --> PropertyTypeService
PropertyTypeOperations --> ReqCreatePropertyTypeDto
PropertyTypeOperations --> ReqUpdatePropertyTypeDto
PropertyTypeOperations --> ResEntryPropertyTypeDto
PropertyTypeOperations --> ResListEntryPropertyTypeDto

' property type controller
PropertyStatusOperations --> PropertyStatusService
PropertyStatusOperations --> ReqCreatePropertyStatusDto
PropertyStatusOperations --> ReqUpdatePropertyStatusDto
PropertyStatusOperations --> ResEntryPropertyStatusDto
PropertyStatusOperations --> ResListEntryPropertyStatusDto
' property type service
PropertyTypeService --> PropertyTypeRepository
' property type repository
PropertyTypeRepository ..|> ReactiveCrudRepository

' property status service
PropertyStatusService --> PropertyStatusRepository
' property status
PropertyStatusRepository ..|> ReactiveCrudRepository


/'
    *** property  ***
'/
PropertyOperations --> PropertyService
PropertyOperations --> ReqCreatePropertyDto
PropertyOperations --> ReqUpdatePropertyDto
PropertyOperations --> ResEntryPropertyDto
PropertyOperations --> ResListEntryPropertyDto
PropertyTypeOperations --> PropertyTypeToPropertyDto
' property service
PropertyService --> PropertyRepository
PropertyOperations --> PropertyAndPropertyTypeService
' property repository
PropertyRepository ..|> ReactiveCrudRepository
/'
    property and property type many to manty relationship
'/
PropertyAndPropertyTypeService --> PropertyAndPropertyTypeRepository
PropertyAndPropertyTypeService --> PropertyRepository
PropertyAndPropertyTypeService --> PropertyTypeRepository
PropertyAndPropertyTypeRepository ..|> ReactiveCrudRepository




' dto response relationships
OtterResponseDto <|-- SuccessResponseDto
OtterResponseDto <|-- ErrorResponseDto
@enduml
